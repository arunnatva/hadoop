<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.bac.ecr.hdf.tools</groupId>
  <artifactId>dlv</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>dlv</name>
  <description>data lineage validation tool</description>
  <parent>
	<groupId>com.bac.ecr.hdf</groupId>
	<artifactId>ecrhdf</artifactId>
	<version>1.0.0</version>
  </parent>
  <properties>
   	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   	<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	<java.version>1.8</java.version>
    <jdk.version>1.8</jdk.version> 
  </properties>
  <repositories>
		<repository>
			<id>nexus</id>
			<url>http://mba005.bankofamerica.com:8000/artifacts/content/groups/mba-group/</url>
		</repository>
  </repositories>
  <pluginRepositories>
		<pluginRepository>
			<id>plugins</id>
			<url>http://mba005.bankofamerica.com:8000/artifacts/content/groups/mba-group/</url>
		</pluginRepository>
  </pluginRepositories>
  
  <dependencies>

	<dependency>
    	<groupId>com.typesafe</groupId>
    	<artifactId>config</artifactId>
    	<version>1.2.1</version>
    </dependency>
<!--
	<dependency>
		<groupId>retail-ecris</groupId>
		<artifactId>hadoop-libs</artifactId>
		<version>5.3.0</version>
		<scope>provided</scope>
	</dependency>	
-->    
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.17</version>
	</dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.7.16</version>
	</dependency>
	<!-- 
		The full blown spring-boot-starter-web is not needed
		since the application only uses RestTemplate.
		
		***** VERY IMPORTANT!!! *****
		When the map reduce job runs on a remote node, it is forced to use the jars 
		on the "hadoop classpath", which are pre-packaged by Clouderra and aren't 
		the latest versions.
		
		Currently, the httpclient-4.2.5.jar is used on the remote nodes which means 
		that spring-web MUST be at 3.2.8.RELEASE.
		
		Later releases of spring-web use newer releases of the httpclient-x.x.x.jar,
		which are incompatible with the older releases resulting in unexpected
		classloader related exceptions.	Most notably:
			Exception in thread "main" java.lang.NoSuchFieldError: INSTANCE
        	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.<clinit>(SSLConnectionSocketFactory.java:144)
        	at org.apache.http.impl.client.HttpClientBuilder.build(HttpClientBuilder.java:951)
        	at org.apache.http.impl.client.HttpClients.createSystem(HttpClients.java:66)
        	at org.springframework.http.client.HttpComponentsClientHttpRequestFactory.<init>(HttpComponentsClientHttpRequestFactory.java:73)
	
		If, at a future date, Clouderra packages a new version of the httpclient-x.x.x.jar on the
		"hadoop classpath", the version of spring-web may have to be updated. 
		***** VERY IMPORTANT!!! *****
	
	-->
	
	<dependency>
		<groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
        <version>3.2.7.RELEASE</version>
    </dependency>
    <dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-test</artifactId>
		<version>3.2.3.RELEASE</version>
		<scope>test</scope>
	</dependency>    
    <dependency>
		<groupId>org.apache.httpcomponents</groupId>
		<artifactId>httpclient</artifactId>
		<version>4.2.5</version>
	</dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.6.4</version>
    </dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-core</artifactId>
		<version>2.6.4</version>
	</dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-annotations</artifactId>
		<version>2.6.4</version>
	</dependency>
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-lang3</artifactId>
		<version>3.3.2</version>
	</dependency>
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-jexl3</artifactId>
		<version>3.0</version>
	</dependency>
	<dependency>
	    <groupId>com.microsoft.sqlserver</groupId>
	    <artifactId>sqljdbc4</artifactId>
	    <version>4.0</version>
		<!--scope>system</scope>
		<systemPath>${project.basedir}/localresources/sqljdbc4-4.0.jar</systemPath-->
    </dependency>
	<dependency>
	    <groupId>org.netezza</groupId>
	    <artifactId>Driver</artifactId>
	    <version>7.2</version>
		<!--scope>system</scope>
		<systemPath>${project.basedir}/localresources/Driver-7.2.jar</systemPath-->
	</dependency>
	<dependency>
		<groupId>org.apache.hive</groupId>
		<artifactId>hive-jdbc</artifactId>
		<version>1.1.0</version>
		<scope>provided</scope>
		<exclusions>
        	<exclusion>
            	<groupId>org.eclipse.jetty.aggregate</groupId>
            	<artifactId>*</artifactId>
        	</exclusion>
    	</exclusions>
	</dependency>
	<dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-common</artifactId>
        <version>2.6.0</version>
        <scope>provided</scope>
		<exclusions>
        	<exclusion>
            	<groupId>jdk.tools</groupId>
            	<artifactId>*</artifactId>
        	</exclusion>
    	</exclusions>
    </dependency>
	<dependency>
		<groupId>org.apache.hadoop</groupId>
		<artifactId>hadoop-mapreduce-client-core</artifactId>
		<version>2.6.0</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
  		<groupId>org.apache.hadoop</groupId>
  		<artifactId>hadoop-mapreduce-client-jobclient</artifactId>
  		<version>2.6.0</version>
  		<scope>provided</scope>
	</dependency>
	<dependency>
    	<groupId>org.apache.hadoop</groupId>
    	<artifactId>hadoop-hdfs</artifactId>
    	<version>2.6.0</version>
    	<scope>provided</scope>
	</dependency>	    
	<dependency>
		<groupId>org.apache.avro</groupId>
		<artifactId>avro</artifactId>
		<version>1.7.6</version>
	</dependency>
	<dependency>
		<groupId>com.twitter</groupId>
		<artifactId>parquet-avro</artifactId>
		<version>1.5.0</version>
	</dependency>
    <dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-math3</artifactId>
		<version>3.6</version>
	</dependency>
	<dependency>
		<groupId>commons-codec</groupId>
		<artifactId>commons-codec</artifactId>
		<version>1.10</version>
	</dependency>
	<dependency>
      	<groupId>org.jasypt</groupId>
      	<artifactId>jasypt</artifactId>
      	<version>1.9.2</version>
      	<classifier>lite</classifier>
      	<scope>compile</scope>
    </dependency>
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId>
		<version>3.12</version>
	</dependency>
	<dependency>
		<groupId>org.apache.poi</groupId> 
  		<artifactId>poi</artifactId> 
  		<version>3.12</version> 
	</dependency>
	<dependency>
    	<groupId>org.apache.avro</groupId>
    	<artifactId>avro-mapred</artifactId>
    	<version>1.7.6</version>
	</dependency>	     
	<dependency> 
	  <groupId>org.testng</groupId> 
	  <artifactId>testng</artifactId> 
	  <version>6.8</version> 
	  <scope>test</scope> 
	</dependency> 
</dependencies>

	<build>
		<plugins>
		
		<plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>3.3</version>
	        <configuration>
			  <!--jdklevel>1.8</jdklevel-->
	          <source>1.8</source>
	          <target>1.8</target>
	        </configuration>
	    </plugin>
	      
	      <!--  
	      	This plugin creates a shaded jar, which contains the actual
	      	class files from all of the maven dependencies. It must be
	      	commented out if using the plugins to build the "lib" folder
	      	within the jar file.
	      -->
<!-- 
		  <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-shade-plugin</artifactId>
			<version>2.4.3</version>
			<executions>
          	  <execution>
            	<phase>package</phase>
            	<goals>
              	  <goal>shade</goal>
            	</goals>
            	<configuration>
    		      <filters>
			        <filter>
                      <artifact>*:*</artifact>
                      <excludes>
                         <exclude>META-INF/*.SF</exclude>
                         <exclude>META-INF/*.DSA</exclude>
                         <exclude>META-INF/*.RSA</exclude>
                         <exclude>**/application.properties</exclude>
                         <exclude>**/gss-jaas.conf</exclude>
                         <exclude>**/log4j.properties</exclude>  
                      </excludes>
                    </filter>
                  </filters>
                </configuration>
          	  </execution>
        	</executions>
	 	 </plugin>
 -->
		
		<!-- 
		These 2 plugins place all of the Maven dependency jars into a "lib" subdirectory 
		within the final jar file.
		
		The first plugin puts all dependencies in the target/classes/lib folder, and 
		the second plugin includes "lib" subdirectory in the final jar file, as well
		as configures the Manifest.mf file. Under normal circumstances, custom class
		loading code would be needed to load the jar files from the "lib" subdirectory 
		into the runtime classpath. Fortunately, Hadoop does this for you!
		
		According to Cloudera:
		http://blog.cloudera.com/blog/2011/01/how-to-include-third-party-libraries-in-your-map-reduce-job/
		
			Include the referenced JAR in the lib subdirectory of the submittable JAR: 
			A MapReduce job will unpack the JAR from this subdirectory into 
			${mapred.local.dir}/taskTracker/${user.name}/jobcache/$jobid/jars 
			on the TaskTracker nodes and point your tasks to this directory to make the 
			JAR available to your code. If the JARs are small, change often, and are 
			job-specific this is the preferred method.
			
		
		 -->
  
		<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-dependency-plugin</artifactId>
		    <executions>
		        <execution>
		            <id>copy-dependencies</id>
		            <phase>prepare-package</phase>
		            <goals>
		                <goal>copy-dependencies</goal>
		            </goals>
		            <configuration>
		            	<excludeScope>provided</excludeScope>
		                <outputDirectory>${project.build.directory}/classes/lib</outputDirectory>
		                <overWriteReleases>false</overWriteReleases>
		                <overWriteSnapshots>false</overWriteSnapshots>
		                <overWriteIfNewer>true</overWriteIfNewer>
		            </configuration>
		        </execution>
		    </executions>
		</plugin>
		<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-jar-plugin</artifactId>
		    <version>2.6</version>
		    <configuration>
		        <archive>
		            <manifest>
		                <addClasspath>true</addClasspath>
		            </manifest>
		            <manifestEntries>
		                <Class-Path>lib/</Class-Path>
		            </manifestEntries>
		        </archive>
		    </configuration>
		</plugin>

		
	 	 <!-- 
	 	 	This plugin builds the tar file for distribution.
	 	 -->

		 <plugin>
		      <groupId>org.apache.maven.plugins</groupId>
		      <artifactId>maven-assembly-plugin</artifactId>
		      <version>2.4</version>
		      <configuration>
		          <finalName>DLV</finalName>
		      	  <appendAssemblyId>false</appendAssemblyId>
		          <descriptors>
		              <descriptor>src/main/assembly/assembly.xml</descriptor>
		          </descriptors>
		      </configuration>
		      <executions>
		          <execution>
		            <phase>package</phase>
		            <goals>
		              	<goal>single</goal>
		            </goals>
		          </execution>
		      </executions>
		 </plugin>

		</plugins>
	</build>
</project>